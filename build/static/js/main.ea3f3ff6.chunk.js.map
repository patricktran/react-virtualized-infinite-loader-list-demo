{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ItemDisplay","_this$props","this","props","title","style","index","imagesrc","concat","react_default","a","createElement","className","alt","src","PureComponent","App","itemCount","totalItems","itemsPerRow","loadMoreItems","_ref","startIndex","stopIndex","startItemIndex","_this","endItemIndex","console","log","loadMore","Promise","resolve","_this2","items","isRowLoaded","_ref2","fromIndex","toIndex","Math","min","i","dist_es","_ref3","height","width","floor","rowCount","ceil","loadMoreRows","minimumBatchSize","_ref4","onRowsRendered","registerChild","ref","rowHeight","rowRenderer","_ref5","key","renderItems","item","push","App_ItemDisplay","Component","connect","state","dispatch","endIndex","type","payload","createItems","numberToCreate","Array","from","length","v","k","newId","uuid","toString","id","initialState","fill","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","store","createStore","combineReducers","arguments","undefined","action","Object","toConsumableArray","slice","applyMiddleware","run","action$","pipe","ofType","delay","random","map","_action$payload","numItemsToCreate","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uMCXAC,2LACO,IAAAC,EAC2BC,KAAKC,MAA7BC,EADHH,EACGG,MAAOC,EADVJ,EACUI,MAAOC,EADjBL,EACiBK,MAChBC,EAAQ,wCAAAC,OAA2CJ,GACzD,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOP,MAAOA,GAAQD,EAArC,KAA8CE,EACjDG,EAAAC,EAAAC,cAAA,OAAKE,IAAKT,EAAOU,IAAKP,YALRQ,kBAUpBC,6MAEFC,UAAYC,IAEZC,YAAc,IAQdC,cAAgB,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,WAAYC,EAAgBF,EAAhBE,UACvBC,EAAiB,EAEjBF,EAAa,IACbE,EAAkBF,EAAaG,EAAKN,aAGxC,IAAMO,EAAgBH,EAAYE,EAAKN,YAAcM,EAAKN,YAG1D,OAFAQ,QAAQC,IAAI,OAAQN,EAAYC,EAAWC,EAAgBE,GAC3DD,EAAKtB,MAAM0B,SAASL,EAAgBE,GAC7BI,QAAQC,8FAbf7B,KAAKC,MAAM0B,SAAS,EAAG,qCAgBlB,IAAAG,EAAA9B,KACG+B,EAAU/B,KAAKC,MAAf8B,MACRN,QAAQC,IAAI,eAAgBK,GAE5B,IAAMC,EAAc,SAAAC,GAKhB,IAL+B,IAEzBC,EAFyBD,EAAZ7B,MAEO0B,EAAKb,YACzBkB,EAAUC,KAAKC,IAAIH,EAAYJ,EAAKb,YAAaa,EAAKf,WAEnDuB,EAAIJ,EAAWI,EAAIH,EAASG,IACjC,IAAKP,EAAMO,GACP,OAAO,EAIf,OAAO,GAMX,OACI/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACK,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,MAERZ,EAAKb,YAAcmB,KAAKO,MAAMD,EAR5B,KASF,IAAME,EAAWR,KAAKS,KAAKf,EAAKf,UAAYe,EAAKb,aAEjD,OAAOV,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACHP,YAAaA,EACbc,aAAchB,EAAKZ,cACnB0B,SAAUA,EACVG,iBAAkBX,KAAKO,MAAM,GAAKb,EAAKb,cAGtC,SAAA+B,GAAA,IAAGC,EAAHD,EAAGC,eAAgBC,EAAnBF,EAAmBE,cAAnB,OACG3C,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACIY,IAAKD,EACLD,eAAgBA,EAChBR,OAAQA,EACRC,MAAOA,EACPU,UAvBR,IAwBQR,SAAUA,EACVS,YACI,SAAAC,GAMI,IANuB,IAAxBlD,EAAwBkD,EAAxBlD,MAAOmD,EAAiBD,EAAjBC,IAAKpD,EAAYmD,EAAZnD,MAELqD,EAAc,GACdtB,EAAY9B,EAAQ0B,EAAKb,YACzBkB,EAAUC,KAAKC,IAAIH,EAAYJ,EAAKb,YAAaa,EAAKf,WAEnDuB,EAAIJ,EAAWI,EAAIH,EAASG,IAAK,CACtC,IAAMmB,EAAO1B,EAAMO,GACbpC,EAAQuD,EAAOA,EAAKvD,MAAQ,UAElCsD,EAAYE,KAAKnD,EAAAC,EAAAC,cAACkD,EAAD,CAAajD,UAAU,OAAO6C,IAAKjB,EAAGlC,MAAOkC,EAAGpC,MAAOA,KAG5E,OACIK,EAAAC,EAAAC,cAAA,OACIC,UAAU,MACV6C,IAAKA,EACLpD,MAAOA,GAENqD,kBAzFnCI,aAuHHC,cAjBS,SAAAC,GAEpB,MAAO,CACH/B,MAAO+B,EAAM/B,QAIM,SAAAgC,GAAQ,MAAK,CACpCpC,SAAU,SAACP,EAAY4C,GAAb,OAA0BD,EAAS,CACzCE,KAAM,YACNC,QAAS,CACL9C,aACA4C,iBAKGH,CAGb/C,4CChIF,IAAMqD,EAAc,SAACC,EAADjD,GAA8C,IAA3BC,EAA2BD,EAA3BC,WAA2BD,EAAf6C,SAS/C,OARiBK,MAAMC,KAAK,CAAEC,OAAQH,GAAkB,SAACI,EAAGC,GACxD,IAAMC,EAAQC,MAAOC,WAAaxD,EAAWwD,WAC7C,MAAO,CACHC,GAAIH,EACJxE,MAAK,SAAAI,OAAWoE,OAQf1D,EAAa,IACpB8D,EAAe,IAAIT,MAAMrD,GAAY+D,KAAK,MA8D1CC,EAAmBtF,OAAOuF,sCAAwCC,IAElEC,EAAiBC,cAEjBC,EAAQC,YACVC,YAAgB,CAAExD,MAjER,WAAkC,IAAjC+B,EAAiC0B,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAzBV,EAAcY,EAAWF,UAAAjB,OAAA,EAAAiB,UAAA,QAAAC,EAC5C,OAAQC,EAAOzB,MACX,IAAK,cAED,OADAxC,QAAQC,IAAIgE,EAAOxB,SACfwB,EAAOxB,QAAQ9C,WAAa,EAC5B,GAAAd,OAAAqF,OAAAC,EAAA,EAAAD,CACO7B,EAAM+B,MAAM,EAAGH,EAAOxB,QAAQ9C,aADrCuE,OAAAC,EAAA,EAAAD,CAEOD,EAAOxB,QAAQnC,OAFtB4D,OAAAC,EAAA,EAAAD,CAGO7B,EAAM+B,MAAMH,EAAOxB,QAAQF,SAAUhD,KAI5C,GAAAV,OAAAqF,OAAAC,EAAA,EAAAD,CACOD,EAAOxB,QAAQnC,OADtB4D,OAAAC,EAAA,EAAAD,CAEO7B,EAAM+B,MAAMH,EAAOxB,QAAQF,SAAS,EAAGhD,KAGtD,QACI,OAAO8C,MAgDf,GACAkB,EAAiBc,YAAgBX,KAGrCA,EAAeY,IAnCE,SAAAC,GAAO,OAAIA,EAAQC,KAChCC,YAAO,aACPC,YAAM/D,KAAKO,MAAsB,IAAhBP,KAAKgE,SAAiB,MAEvCC,YAAI,SAAAX,GAAU,IAAAY,EACuBZ,EAAOxB,QAAhC9C,EADEkF,EACFlF,WAAY4C,EADVsC,EACUtC,SAChBuC,EAAmBvC,EAAW5C,EAMlC,OAJmB,IAAfA,IACAmF,GAAsC,GAE1C9E,QAAQC,IAAI,WAAY6E,EAAkBnF,EAAY4C,GAC9C,CACJC,KAAM,cACNC,QAAS,CACLnC,MAAOoC,EAAYoC,EAAkBb,EAAOxB,SAC5C9C,aACA4C,WACAhD,WAAYA,SAmB5BwF,IAASC,OAAOlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAUrB,MAAOA,GAAO9E,EAAAC,EAAAC,cAACkG,EAAD,OACpCC,SAASC,eAAe,SF6BtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea3f3ff6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, PureComponent } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport './App.css';\r\nimport { InfiniteLoader, List, AutoSizer } from 'react-virtualized';\r\nimport 'react-virtualized/styles.css';\r\nimport { totalItems } from './index';\r\n\r\nclass ItemDisplay extends PureComponent {\r\n    render() {\r\n        const { title, style, index } = this.props;\r\n        const imagesrc = `//via.placeholder.com/90x90.png?text=${title}`;\r\n        return <div className=\"item\" style={style}>{title}::{index}\r\n            <img alt={title} src={imagesrc} />\r\n        </div>\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    itemCount = totalItems;\r\n\r\n    itemsPerRow = 0;\r\n\r\n    componentDidMount() {\r\n\r\n        //load first 60\r\n        this.props.loadMore(0, 59);\r\n    }\r\n\r\n    loadMoreItems = ({ startIndex, stopIndex }) => {\r\n        let startItemIndex = 0;\r\n\r\n        if (startIndex > 0) {\r\n            startItemIndex = (startIndex * this.itemsPerRow);\r\n        }\r\n\r\n        const endItemIndex = (stopIndex * this.itemsPerRow + this.itemsPerRow);\r\n        console.log(\"load\", startIndex, stopIndex, startItemIndex, endItemIndex)\r\n        this.props.loadMore(startItemIndex, endItemIndex);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    render() {\r\n        const { items } = this.props;\r\n        console.log(\"items length\", items)\r\n\r\n        const isRowLoaded = ({ index }) => {\r\n            //console.log(\"IsRowLoaded\", index)\r\n            const fromIndex = index * this.itemsPerRow;\r\n            const toIndex = Math.min(fromIndex + this.itemsPerRow, this.itemCount);\r\n\r\n            for (let i = fromIndex; i < toIndex; i++) {\r\n                if (!items[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        const ITEM_SIZE = 275;\r\n        const ITEM_HEIGHT = 200;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <AutoSizer>\r\n                    {({ height, width }) => {\r\n\r\n                        this.itemsPerRow = Math.floor(width / ITEM_SIZE);      \r\n                        const rowCount = Math.ceil(this.itemCount / this.itemsPerRow);\r\n\r\n                        return <InfiniteLoader\r\n                            isRowLoaded={isRowLoaded}\r\n                            loadMoreRows={this.loadMoreItems}\r\n                            rowCount={rowCount}\r\n                            minimumBatchSize={Math.floor(30 / this.itemsPerRow)}\r\n                            \r\n                        >\r\n                            {({ onRowsRendered, registerChild }) => (\r\n                                <List\r\n                                    ref={registerChild}\r\n                                    onRowsRendered={onRowsRendered}\r\n                                    height={height}\r\n                                    width={width}\r\n                                    rowHeight={ITEM_HEIGHT}\r\n                                    rowCount={rowCount}\r\n                                    rowRenderer={\r\n                                        ({ index, key, style }) => {\r\n\r\n                                            const renderItems = [];\r\n                                            const fromIndex = index * this.itemsPerRow;\r\n                                            const toIndex = Math.min(fromIndex + this.itemsPerRow, this.itemCount);\r\n\r\n                                            for (let i = fromIndex; i < toIndex; i++) {\r\n                                                const item = items[i];\r\n                                                const title = item ? item.title : \"Loading\";\r\n\r\n                                                renderItems.push(<ItemDisplay className=\"Item\" key={i} index={i} title={title} />)\r\n                                            }\r\n\r\n                                            return (\r\n                                                <div\r\n                                                    className='Row'\r\n                                                    key={key}\r\n                                                    style={style}\r\n                                                >\r\n                                                    {renderItems}\r\n                                                </div>\r\n                                            )\r\n                                        }}\r\n                                />\r\n                            )}\r\n                        </InfiniteLoader>\r\n                    }}\r\n                </AutoSizer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    //console.log(\"state\", state)\r\n    return {\r\n        items: state.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadMore: (startIndex, endIndex) => dispatch({\r\n        type: 'LOAD_MORE',\r\n        payload: {\r\n            startIndex,\r\n            endIndex\r\n        }\r\n    })\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport { createEpicMiddleware, ofType, } from 'redux-observable';\nimport { delay, map } from 'rxjs/operators'\nimport uuid from 'uuidv4';\nimport './index.css';\nimport App from './App';\n\nconst createItems = (numberToCreate, { startIndex, endIndex }) => {\n    const newItems = Array.from({ length: numberToCreate }, (v, k) => {\n        const newId = uuid().toString() + startIndex.toString();\n        return {\n            id: newId,\n            title: `title-${newId}`\n        }\n    });\n\n    return newItems;\n}\n\n//create arbitary sized array\nexport const totalItems = 6000; //you can set this to a larger number\nconst initialState = new Array(totalItems).fill(null);\n\nconst items = (state = initialState, action) => {\n    switch (action.type) {\n        case 'MORE_LOADED':\n            console.log(action.payload)\n            if (action.payload.startIndex > 0) {\n                return [\n                    ...state.slice(0, action.payload.startIndex),\n                    ...action.payload.items,\n                    ...state.slice(action.payload.endIndex, totalItems)\n                ]\n            }\n            else {\n                return [\n                    ...action.payload.items,\n                    ...state.slice(action.payload.endIndex+1, totalItems)\n                ]\n            }\n        default:\n            return state\n    }\n}\n\n//if needed, don't load more until previous fetch request completed\n/*\nconst isFetching = (state = false, action) => {\n    switch (action.type) {\n        case 'LOAD_MORE':\n            return true;\n        case 'MORE_LOADED':\n            return false;\n        default:\n            return state\n    }\n}*/\n\nconst rootEpic = action$ => action$.pipe(\n    ofType('LOAD_MORE'),\n    delay(Math.floor(Math.random() * 301 + 200)), // Asynchronously wait then continue\n    //use switchmap/mergemap - in real world scenario, could use observable.ajax that is cancelable\n    map(action => {\n        const { startIndex, endIndex } = action.payload;\n        let numItemsToCreate = endIndex - startIndex;\n\n        if (startIndex === 0)\n            numItemsToCreate = numItemsToCreate + 1;\n\n        console.log(\"creating\", numItemsToCreate, startIndex, endIndex);\n        return ({\n            type: 'MORE_LOADED',\n            payload: {\n                items: createItems(numItemsToCreate, action.payload),\n                startIndex,\n                endIndex,\n                totalItems: totalItems\n            }\n        })\n    })\n);\n\n//to use with Chrome redux dev tool\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = createStore(\n    combineReducers({ items }),\n    {}, //initial state\n    composeEnhancers(applyMiddleware(epicMiddleware))\n);\n\nepicMiddleware.run(rootEpic);\n\nReactDOM.render(<Provider store={store}><App /></Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}